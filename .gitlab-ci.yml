# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public
# License v2 as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public
# License along with this program; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 021110-1307, USA.
#

image: docker:20-dind

services:
    - name: docker:20-dind
      alias: docker
      command: ["--tls=false"]

# To enable Kernel Build, set  GitLab Environment variable named BUILD_KERNEL with value "yes"
# If you disable Kernel Build, make sure Environment variable PREBUILT_KERNEL_ID points to previously built the kernel job id.
# To enable image build, set Environment variable BUILD_IMAGE with value "yes"
# If you disable Image Build, make sure Environment variable PREBUILT_IMAGE_ID points to previously built rootfs job id.
# See https://gitlab.com/help/ci/variables/README#custom-environment-variables

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_TLS_CERTDIR: ""
  IMAGE_TAG: registry.gitlab.com/$CI_PROJECT_NAMESPACE/dduper:qemu
  VERSION_IMAGE_TAG: registry.gitlab.com/$CI_PROJECT_NAMESPACE/dduper:V0.03
  DOCKER_IMG: laks/dduper:build

stages:
  - setup
  - pull
  - build
  - test

before_script:
   - echo "BUILD KERNEL - $BUILD_KERNEL"
   - echo "BUILD IMAGE - $BUILD_IMAGE"
   - echo "PREBUILT_KERNEL_ID - $PREBUILT_KERNEL_ID"
   - echo "PREBUILT_IMAGE_ID - $PREBUILT_IMAGE_ID"
   - docker login --username $CI_REGISTRY_USER --password $CI_REGISTRY_PASSWORD $CI_REGISTRY
   # - rm -rf ci/gitlab/tests/dduper.log ci/gitlab/tests/dduper.db

docker build:
  stage: setup
  script:
    - cd ci/gitlab
    - docker pull $IMAGE_TAG > /dev/null && echo "Downloaded image" || ( docker build -t $IMAGE_TAG . && docker push $IMAGE_TAG )

docker publish:
  stage: setup
  only:
    - dockerbuild
  script:
    - echo "Docker image  for hub"
    - docker build -t $VERSION_IMAGE_TAG . && docker push $VERSION_IMAGE_TAG
    - docker tag $VERSION_IMAGE_TAG $DOCKER_IMG
    - docker logout
    - docker images
    - docker login --username $D_USERNAME --password $D_PASSWORD $D_REGISTRY
    - docker push $DOCKER_IMG

kernel build:
  before_script:
    - apk add curl unzip 
  stage: setup
  script:
     - if [ "$BUILD_KERNEL" == "yes" ]; then
         docker run --cap-add SYS_PTRACE --cap-add sys_admin --privileged --device=/dev/kvm -v $PWD:/repo $IMAGE_TAG /repo/ci/gitlab/kernel_build.sh;
       else
         curl -o bzImage.zip --location --header "JOB-TOKEN:$CI_JOB_TOKEN"  "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/jobs/$PREBUILT_KERNEL_ID/artifacts" && unzip bzImage.zip;
       fi;
  artifacts:
    when: always
    paths:
      - bzImage
 
image build:
  before_script:
    - apk add curl unzip 
  stage: setup
  script:
     - if [ "$BUILD_IMAGE" == "yes" ]; then
          docker run --cap-add SYS_PTRACE --cap-add sys_admin --privileged --device=/dev/kvm -v $PWD:/repo $IMAGE_TAG /repo/ci/gitlab/setup_image.sh;
       else
          curl  -o qemu-image.img.zip --location --header "JOB-TOKEN:$CI_JOB_TOKEN" "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/jobs/$PREBUILT_IMAGE_ID/artifacts" && unzip qemu-image.img.zip;
       fi;
  artifacts:
    when: always
    paths:
      - qemu-image.img

Setup repos:
  before_script:
    - apk add curl unzip 
  stage: pull
  script:
     - docker run --cap-add SYS_PTRACE --cap-add sys_admin --privileged --device=/dev/kvm -v $PWD:/repo $IMAGE_TAG /repo/ci/gitlab/setup_repos.sh $CI_COMMIT_REF_NAME
  artifacts:
    when: always
    paths:
      - qemu-image.img

btrfs-progs-csum-patch build:
  stage: build
  script:
     - echo "build_with_patch" > $PWD/cmd
     - docker run --cap-add SYS_PTRACE --cap-add sys_admin --privileged --device=/dev/kvm -v $PWD:/repo $IMAGE_TAG /repo/ci/gitlab/run_tests.sh
     - test -e "build_pass.txt" || exit 1
  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - qemu-image.img

fast mode check:
  stage: test
  script:
     - echo "./ci/gitlab/tests/fast_mode.sh fastmode" > $PWD/cmd
     - docker run --cap-add SYS_PTRACE --cap-add sys_admin --privileged --device=/dev/kvm -v $PWD:/repo $IMAGE_TAG /repo/ci/gitlab/run_tests.sh
     - test -e "fastmode_pass.txt" || exit 1

dump-csum check:
  stage: test
  allow_failure: true
  script:
     - echo "./ci/gitlab/tests/basic_sanity_dumpcsum.sh xxhash" > $PWD/cmd
     - docker run --cap-add SYS_PTRACE --cap-add sys_admin --privileged --device=/dev/kvm -v $PWD:/repo $IMAGE_TAG /repo/ci/gitlab/run_tests.sh
     - test -e "xxhash_pass.txt" || exit 1
  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - random1
      - random2

crc2 sanity check:
  stage: test
  script:
     - ls -lR
     - echo "./ci/gitlab/tests/basic_sanity_csum.sh crc32" > $PWD/cmd
     - docker run --cap-add SYS_PTRACE --cap-add sys_admin --privileged --device=/dev/kvm -v $PWD:/repo $IMAGE_TAG /repo/ci/gitlab/run_tests.sh
     - test -e "crc32_pass.txt" || exit 1

xxhash sanity check:
  stage: test
  allow_failure: true
  script:
     - ls -lR
     - echo "./ci/gitlab/tests/basic_sanity_csum.sh xxhash" > $PWD/cmd
     - docker run --cap-add SYS_PTRACE --cap-add sys_admin --privileged --device=/dev/kvm -v $PWD:/repo $IMAGE_TAG /repo/ci/gitlab/run_tests.sh
     - test -e "xxhash_pass.txt" || exit 1

blake2 sanity check:
  stage: test
  allow_failure: true
  script:
     - echo "./ci/gitlab/tests/basic_sanity_csum.sh blake2" > $PWD/cmd
     - docker run --cap-add SYS_PTRACE --cap-add sys_admin --privileged --device=/dev/kvm -v $PWD:/repo $IMAGE_TAG /repo/ci/gitlab/run_tests.sh
     - test -e "blake2_pass.txt" || exit 1

sha256 sanity check:
  stage: test
  allow_failure: true
  script:
     - echo "./ci/gitlab/tests/basic_sanity_csum.sh sha256" > $PWD/cmd
     - docker run --cap-add SYS_PTRACE --cap-add sys_admin --privileged --device=/dev/kvm -v $PWD:/repo $IMAGE_TAG /repo/ci/gitlab/run_tests.sh
     - test -e "sha256_pass.txt" || exit 1

dir test:
  stage: test
  script:
     - echo "./ci/gitlab/tests/basic_dir_test.sh dirtest" > $PWD/cmd
     - docker run --cap-add SYS_PTRACE --cap-add sys_admin --privileged --device=/dev/kvm -v $PWD:/repo $IMAGE_TAG /repo/ci/gitlab/run_tests.sh
     - test -e "dirtest_pass.txt" || exit 1

dir-recurse test:
  stage: test
  script:
     - echo "./ci/gitlab/tests/basic_dir_recurse_test.sh dirr" > $PWD/cmd
     - docker run --cap-add SYS_PTRACE --cap-add sys_admin --privileged --device=/dev/kvm -v $PWD:/repo $IMAGE_TAG /repo/ci/gitlab/run_tests.sh
     - test -e "dirr_pass.txt" || exit 1

docker-image test:
  stage: test
  script:
     - docker run --cap-add MKNOD --cap-add SYS_PTRACE --cap-add sys_admin --privileged --device=/dev/kvm -v $PWD:/repo $VERSION_IMAGE_TAG /repo/ci/gitlab/tests/docker_test.sh
     - echo "TODO- Verify results"
